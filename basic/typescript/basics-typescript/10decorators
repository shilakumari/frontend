Module Introduction
A First Class Decorator
Working with Decorator Factories
Building More Useful Decorators
Adding Multiple Decorators
Diving into Property decorators
Accessor and Parameter Decorators
When Do Decorators Execute?
Returning (and chaining) a Class in a Class Decorators
Other Decorator Return Types
Example: Creating an "Autobind" Decorator
Validation with Decorators - First Steps
Validation with Decorators - Finished
Fixing a Validator Bug
Wrap Up
Useful Resources & Links



Module Introduction
	It is used for Meta-programming.
	Decorators are a particularly well suited instrument, for writting code which is easier to use by other developers.


A First Class Decorator
	Decorator's runs when your class is defined, not when it is instantiated.
	Decorator's runs when JavaScript finds your class definition, your constructor function definition.
	Decorator's function name starts with capital letter.
		function Logger(constructor: Function) {}

	In tsconfig.json:
		"experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */

	
	function Logger(constructor: Function) {
  		console.log('Logging...');
  		console.log(constructor);
	}
	@Logger
	class Person {
		name = 'Max';
		constructor() {
    			console.log('Creating person object...');
  		}
	}
	//const pers = new Person();
	//console.log(pers);


Working with Decorator Factories
	function Logger(logString: string) {
  		return function(constructor: Function) {
    		console.log(logString);
    		console.log(constructor);
  		};
	}
	
	@Logger('LOGGING - PERSON')
	class Person {
		name = 'Max';
  		constructor() {
    			console.log('Creating person object...');
  		}
	}
	
	
Building More Useful Decorators
	
function WithTemplate(template: string, hookId: string) {
  return function(_: any) {  //_ means, we know here argument constructor but we are not going to use it
    const hookEl = document.getElementById(hookId);
    if (hookEl) {
      hookEl.innerHTML = template;
    }
  }
}
function WithTemplate2(template: string, hookId: string) {
  return function(constructor: any) {
    const hookEl = document.getElementById(hookId);
    const p = new constructor();
    if (hookEl) {
      hookEl.innerHTML = template;
      hookEl.querySelector('h1')!.textContent = p.name;
    }
  }
}
//@WithTemplate('Hiiii', 'app')
@WithTemplate2('<h1>My Person Object</h1>', 'app')
class Person {
  name = 'Max';
  constructor() {
    console.log('Creating person object...');
  }
}
	

Adding Multiple Decorators
		Decorator's factory execute top to button
		Decorator's function execute buttom up
		
function Logger(logString: string) {
  console.log('LOGGER FACTORY');
  return function(constructor: Function) {
    console.log(logString);
    console.log(constructor);
  };
}

function WithTemplate(template: string, hookId: string) {
  console.log('TEMPLATE FACTORY');
  return function(constructor: any) {
    console.log('Rendering template');
    const hookEl = document.getElementById(hookId);
    const p = new constructor();
    if (hookEl) {
      hookEl.innerHTML = template;
      hookEl.querySelector('h1')!.textContent = p.name;
    }
  }
}

// @Logger('LOGGING - PERSON')
@Logger('LOGGING')
@WithTemplate('<h1>My Person Object</h1>', 'app')
class Person {
  name = 'Max';
  constructor() {
    console.log('Creating person object...');
  }
}



Diving into Property decorators, Accessor, Method and Parameter Decorators

function Log(target: any, propertyName: string | Symbol) {
  console.log('Property decorator!');
  console.log( propertyName);
  console.log(target);
}
function Log2(target: any, name: string, descriptor: PropertyDescriptor) {
  console.log('Accessor decorator!');
  console.log(target);
  console.log(name);
  console.log(descriptor);
}
function Log3(
  target: any,
  name: string | Symbol,
  descriptor: PropertyDescriptor
) {
  console.log('Method decorator!');
  console.log(target);
  console.log(name);
  console.log(descriptor);
}
function Log4(target: any, name: string | Symbol, position: number) {
  console.log('Parameter decorator!');
  console.log(target);
  console.log(name);
  console.log(position);
}

class Product {
  @Log
  title: string;
  private _price: number;
  @Log2
  set price(val: number) {
    if (val > 0) {
      this._price = val;
    } else {
      throw new Error('Invalid price - should be positive!');
    }
  }
  constructor(t: string, p: number) {
    this.title = t;
    this._price = p;
  }
  @Log3
  getPriceWithTax(@Log4 tax: number) {
    return this._price * (1 + tax);
  }
}



When Do Decorators Execute?
	Doesn't:
		const p1 = new Product('Book', 19);
		const p2 = new Product('Book 2', 29);
		This compiles without errors, but decorator code here doesn't run more often.
			No matter if it was property decorator, method decorator, accessor decorator, parameter decorator.
		These decorators do not execute at runtime when we call a method or when working with a properties.
			Decorators are not event listeners.
	Does:
		They all executed when you defined this class.
		These decorators allow to do additional behind the scenes work, to then setup some code that should run whatever it,
			is called to add extra metadata or restores some data about a property somewhere in project or in library, which we're creating.
			That is the core uses.



Returning (and chaining) a Class in a "Class Decorators"
	With a "Class Decorator function", can return a "new constructor" function which will replace the old one.
		So it'll replace the class to which added the decorator
	
	function WithTemplate(template: string, hookId: string){
	 	console.log('TEMPLATE FACTORY');
	  	return function<T extends { new (...args: any[]): {name: string} }>(originalConstructor: T) {
	    		return class extends originalConstructor { //Creating a class here, which just create a constructor function with below login in it.
	      			constructor(..._: any[]) {
	        			super(); //Here calling original constructor
	        			console.log('Rendering template');
	        			const hookEl = document.getElementById(hookId);
	        			if (hookEl) {
	          				hookEl.innerHTML = template;
	          				hookEl.querySelector('h1')!.textContent = this.name;
	        			}
	      			}
	   		 };
	 	};
	}

	@WithTemplate('<h1>My Person Object</h1>', 'app')
	class Person {
 		name = 'Max';
  		constructor() {
    			console.log('Creating person object...');
  		}
	}




Other Decorator Return Types
		https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
        Log2 & Log3 can return something & typeScript can use it 
        Log & Log4 can return something & but typeScript cann't use it 
        
        

Creating an "Autobind" Decorator
	function Autobind(_: any, _2: string, descriptor: PropertyDescriptor) {
  		const originalMethod = descriptor.value; // This'll give the access to the original method
  		const adjDescriptor: PropertyDescriptor = {
  	  		configurable: true,
  	  		enumerable: false,
  	 		get() { // Getter here, It'll run with adding extra logic, before value returns 
      				const boundFn = originalMethod.bind(this);
      				return boundFn;
    			}
  		};
  		return adjDescriptor;
	}

	class Printer {
  		message = 'This works!';
  		@Autobind
  		showMessage() {
  	  		console.log(this.message);
  		}
	}
	const p = new Printer();
	//p.showMessage();
	const button = document.querySelector('button')!; //Adding ! means, the value of document.querySelector('button') should not be null
	//button.addEventListener('click', p.showMessage.bind(p)); //Without an "Autobind" Decorator
	button.addEventListener('click', p.showMessage); //With an "Autobind" Decorator




Validation with Decorators - Finished
	interface ValidatorConfig {
  		[property: string]: { //Here could be a class name
    			[validatableProp: string]: string[]; // ['required', 'positive']
  		};
	}

	const registeredValidators: ValidatorConfig = {}; // it's empty because, when third party libraries gets loaded, no validators have been registered yet

	function Required(target: any, propName: string) {	//"Property Decorator"
  		registeredValidators[target.constructor.name] = {
    ...registeredValidators[target.constructor.name],
    [propName]: ['required']
  };
}

function PositiveNumber(target: any, propName: string) {
  registeredValidators[target.constructor.name] = {
    ...registeredValidators[target.constructor.name],
    [propName]: ['positive']
  };
}

function validate(obj: any) {
  const objValidatorConfig = registeredValidators[obj.constructor.name];
  if (!objValidatorConfig) {
    return true;
  }
  let isValid = true;
  for (const prop in objValidatorConfig) {
    for (const validator of objValidatorConfig[prop]) {
      switch (validator) {
        case 'required':
          isValid = isValid && !!obj[prop];
          break;
        case 'positive':
          isValid = isValid && obj[prop] > 0;
          break;
      }
    }
  }
  return isValid;
}

class Course {
  @Required
  title: string;
  @PositiveNumber
  price: number;
  constructor(t: string, p: number) {
    this.title = t;
    this.price = p;
  }
}
const courseForm = document.querySelector('form')!;
courseForm.addEventListener('submit', event => {
  event.preventDefault();
  const titleEl = document.getElementById('title') as HTMLInputElement;
  const priceEl = document.getElementById('price') as HTMLInputElement;
  const title = titleEl.value;
  const price = +priceEl.value;
  const createdCourse = new Course(title, price);
  if (!validate(createdCourse)) {
    alert('Invalid input, please try again!');
    return;
  }
  console.log(createdCourse);
});



Fixing a Validator Bug
	https://www.udemy.com/course/understanding-typescript/learn/lecture/16935744#questions/8835948


Wrap Up
	https://github.com/typestack/class-validator
	https://angular.io/
		Decorator is core part of the angular
	https://docs.nestjs.com/controllers
		NestJS is the server-side JavaScript framework for nodeJS, here we use Decorator.	


Useful Resources & Links
	More on Decorators: https://www.typescriptlang.org/docs/handbook/decorators.html
