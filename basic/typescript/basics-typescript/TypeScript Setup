Setting up TypeScript
1)IDE: Visual Studio Code - Download visual studio zip file
2)Installing NodeJS - Download nodejs zip file
  node -v
	npm -version
    npm i npm to update
		npm install latest-version
3)Installing the TypeScript compiler
  npm install typescript -G //install globally
	npm install -g typescript   | sudo npm install -g typescript
		tsc -v
		tsc --version
		tsc <fileName>
 
When we make changes in .ts file, need to compile .ts file then reload in browser. 
	To avoid this reloading, We can also add another tool called "lite-server".
For that command:
	npm init
		(Hit enter)
	npm install --save-dev lite-server
	npm start
	
4)npm init
	Created package.json
  
5)For running in lite-server
  npm install --save-dev lite-server
  	Created package-lock.json
	Created node-modules
  Inside package.json
  	"scripts": {    "start": "lite-server"},
	  "devDependencies": {	"lite-server": "^2.6.1" }
  bs-config.json
  	{
    	 "port": 3000,
    	 "server": {
    	   	 "baseDir": "./  
    	   //"baseDir": "C:/Users/java/Downloads/first-project/"
	      }
     }

6)npm start


node-modules:
	This is a huge folder which in this stores all third party packages and their dependencies.
	And since it is so huge.
can delete and recreate "node-modules" by running:
	npm install

7) 
 npm install
  npm start
  npm run		
		
	
First Project:
first-file.ts
const button = document.querySelector("button");
const input1 = document.getElementById("num1")! as HTMLInputElement;
const input2 = document.getElementById("num2")! as HTMLInputElement;

function add(num1: number, num2: number) {
  return num1 + num2;
}

button.addEventListener("click", function() {
  console.log(add(+input1.value, +input2.value));
  alert('Hello Shalu');
  //resultDiv=document.getElementById("result");
  //resultDiv.innerHTML=add(input1.value, input2.value);
});


first-file.js
var button = document.querySelector("button");
var input1 = document.getElementById("num1");
var input2 = document.getElementById("num2");
function add(num1, num2) {
	if(typeof num1==="number" && typeof num2==="number"){
    		return num1 + num2;
	}else{
   		return +num1 + +num2;
  	}
}
button.addEventListener("click", function () {
    console.log(add(+input1.value, +input2.value));
    alert('Hello Shalu');
    //   resultDiv=document.getElementById("result");
    //   resultDiv.innerHTML=add(input1.value, input2.value);
});


first.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <meta http-equiv="X-UA-Compatible" content="ie=edge" />

    <title>Understanding TypeScript</title>
    <script src="first-file.js" defer></script>
  </head>
  <body>
    <input type="number" id="num1" placeholder="Number 1" />
    <input type="number" id="num2" placeholder="Number 2" />
    <button>Add</button>
    <div id="result">
    </div>
  </body>
</html>


Babel JavaScript compiler

View/Extensions in VSCode
 We can also install certain extensions/third-party plugins, which changes appearence & behaviour of the editor as -
	Material Icon Theme
	ESLint- Code Quality Check Support
	Path Intellisense- for import
	Prettier- Code Formatter
	TSLint
